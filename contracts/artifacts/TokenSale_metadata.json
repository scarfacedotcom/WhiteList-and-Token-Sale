{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "AddAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "customer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ethAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					}
				],
				"name": "BuyTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "customer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "resultAmount",
						"type": "uint256"
					}
				],
				"name": "BuyTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ContractFallbackReceivedTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ContractReceivedTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "RemoveAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "RemoveCustomerToken",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenSaleRegistry",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "SetTokenSaleRegistry",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "SetWallet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rateMul",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rateDiv",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "UpdateCustomerToken",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					}
				],
				"name": "addAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_weiAmount",
						"type": "uint256"
					}
				],
				"name": "calculateTokenAmountInWei",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_weiAmount",
						"type": "uint256"
					}
				],
				"name": "calculateTokenAmountInWeiWholeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountInWei",
						"type": "uint256"
					}
				],
				"name": "convertWeiToWholeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "coolDownPeriodInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdminCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdminList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractEtherBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractEtherBalanceWholeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractTokenBalanceWholeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "someOwner",
						"type": "address"
					}
				],
				"name": "getTokenBalanceAnyWallet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenToSell",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenSaleRegistry",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_whitelistEnabled",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "_tokensPerEthMultiplier",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokensPerEthDivisor",
						"type": "uint256"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					}
				],
				"name": "isAdmin",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lastPurchaseTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxBuyAmountPerSessionInDAI",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					}
				],
				"name": "removeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_coolDownPeriodInMinutes",
						"type": "uint256"
					}
				],
				"name": "setCoolDownPeriodInMinutes",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxBuyAmountPerSessionInDAI",
						"type": "uint256"
					}
				],
				"name": "setMaxBuyAmountPerSessionInDAIWholeTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_useWallet",
						"type": "bool"
					}
				],
				"name": "setSendToWalletEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokensPerEthMultiplier",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokensPerEthDivisor",
						"type": "uint256"
					}
				],
				"name": "setTokenMath",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ITokenSaleRegistry",
						"name": "_tokenSaleWhitelistRegistry",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_whitelistEnabled",
						"type": "bool"
					}
				],
				"name": "setTokenSaleWhitelistRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "setWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_whitelistEnabled",
						"type": "bool"
					}
				],
				"name": "setWhitelistEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenSaleWhitelistRegistry",
				"outputs": [
					{
						"internalType": "contract ITokenSaleRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenToSell",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokensPerEthDivisor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokensPerEthMultiplier",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "useWallet",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "whitelistEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAllEther",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAllTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawEther",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by an admin (`account`)."
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by an admin (`account`)."
				}
			},
			"kind": "dev",
			"methods": {
				"buyTokens()": {
					"returns": {
						"_0": "amountToBuy count of our token that was bought."
					}
				},
				"calculateTokenAmountInWei(uint256)": {
					"details": "Takes in WEI amount that the Buyer has specified that they want to spend. It then uses the multiplier and divisor the owner or admin has set     to calculate amount of our token to give back in correspondence.",
					"params": {
						"_weiAmount": "is the amount in WEI with 18 0's that the buyer is spending of their ETH/DAI."
					},
					"returns": {
						"_0": "amount of our token in WEI format."
					}
				},
				"calculateTokenAmountInWeiWholeTokens(uint256)": {
					"details": "Takes in WEI amount that the Buyer has specified that they want to spend. It then uses the multiplier and divisor the owner or admin has set     to calculate amount of our token to give back in correspondence.",
					"params": {
						"_weiAmount": "is the amount in WEI with 18 0's that the buyer is spending of their ETH/DAI."
					},
					"returns": {
						"_0": "amount of our token in ETH/DAI full token format."
					}
				},
				"convertWeiToWholeTokens(uint256)": {
					"details": "Utilizes safemath function to convert wei to whole ETH/DAI amount.",
					"params": {
						"amountInWei": "The full amount with 18 0's in it."
					},
					"returns": {
						"_0": "Full amount converted to whole ETH/DAI."
					}
				},
				"getContractEtherBalance()": {
					"details": "View-only function to return this contract's Ether balance in WEI. As Buys are made, this contract receives Ether and sends out our custom token    based on the math conversion rate. ",
					"returns": {
						"_0": "This contract's default Ether balance in WEI (with 18 0's after it). "
					}
				},
				"getContractEtherBalanceWholeTokens()": {
					"details": "View-only function to return this contract's Ether balance in WEI. As Buys are made, this contract receives Ether and sends out our custom token    based on the math conversion rate. ",
					"returns": {
						"_0": "This contract's default Ether balance in ETH format   "
					}
				},
				"getContractTokenBalance()": {
					"details": "View-only function to return this contract's token balance in WEI    NOTE: THIS IS VERY IMPORT BECAUSE IT'S GOING OUT TO THE LEDGE ESSENTIALLY OF THE MAIN TOKEN CONTRACT AND GETTING THE BALANCE OF THE ADDRESS     OF THE tokenToSell ITSELF.",
					"returns": {
						"_0": "Full contract balance in WEI format (with 18 0's after it). "
					}
				},
				"getContractTokenBalanceWholeTokens()": {
					"details": "View-only function to return this contract's token balance in whole tokens    NOTE: THIS IS VERY IMPORT BECAUSE IT'S GOING OUT TO THE LEDGE ESSENTIALLY OF THE MAIN TOKEN CONTRACT AND GETTING THE BALANCE OF THE ADDRESS     OF THE tokenToSell ITSELF.",
					"returns": {
						"_0": "Full contract balance in ETH (whole tokens WITHOUT 18 0's after it). "
					}
				},
				"getTokenBalanceAnyWallet(address)": {
					"details": "Gets amount in WEI of our token that any wallet currently owns.",
					"params": {
						"someOwner": "is any wallet address that owns some of our token."
					},
					"returns": {
						"_0": "the amount in WEI of their balance."
					}
				},
				"initialize(address)": {
					"details": "Initializes the contract setting the deployer as the initial owner."
				},
				"initialize(address,address,address,bool,uint256,uint256)": {
					"details": "The contract owner must call this function immediately after contract deployment to set initial parameters.",
					"params": {
						"_owner": "- the account owner's address which is typically the address of the account used to deploy this contract.",
						"_tokenSaleRegistry": "- the contract address of the TokenSaleRegistry contract where whitelisted addresses can be placed.",
						"_tokenToSell": "- the contract address of our token that we're selling.",
						"_tokensPerEthDivisor": "is the divisor. Typically we would send a 1 in here unless the cost of our token ends up being priced higher than the price of an ETH/DAI.     If we pass in 20 as the divisor then 1 ETH will send buyer .05 of our tokens or 20:1 ration.",
						"_tokensPerEthMultiplier": "is the multiplier. 20 would mean 1:20. 1 ETH/DAI would allow them to purchase 20 tokens.",
						"_whitelistEnabled": "- whether we want whitelisting lookups during the Buy operations enabled/disabled. This can be changed      later with calls to either the setTokenSaleWhitelistRegistry function or the setWhitelistEnabled functions."
					}
				},
				"isOwner()": {
					"details": "Returns true if the caller is the current owner."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pause()": {
					"details": "Called by a pauser to pause, triggers stopped state."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setCoolDownPeriodInMinutes(uint256)": {
					"details": "allows admin to specify how long customer must wait (in minutes) before executing a Buy operation again. Internally this is converted to seconds.",
					"params": {
						"_coolDownPeriodInMinutes": "time in minutes customer must wait before buying again."
					}
				},
				"setMaxBuyAmountPerSessionInDAIWholeTokens(uint256)": {
					"details": "allows admin to specify the max amount of Dai (in whole tokens) a customer is allowed to perform on a single buyToken operation before needing to wait for     cool-down period to expire.",
					"params": {
						"_maxBuyAmountPerSessionInDAI": "in whole tokens. This will be converted to Wei to compare during the buyToken operation."
					}
				},
				"setSendToWalletEnabled(bool)": {
					"params": {
						"_useWallet": "whether or not admin wants to have the buyer's ETH/DAI sent to a specified outside wallet vs manually withdrawn later."
					}
				},
				"setTokenMath(uint256,uint256)": {
					"details": "allows admin to specify a multiplier and/or divisor for calculating price of our custom token in correspondence to amount of ETH/DAI passed in      to the Buy operation.",
					"params": {
						"_tokensPerEthDivisor": "is the divisor. Typically we would send a 1 in here unless the cost of our token ends up being priced higher than the price of an ETH/DAI.",
						"_tokensPerEthMultiplier": "is the multiplier. 20 would mean 1:20. 1 ETH/DAI would allow them to purchase 20 tokens."
					}
				},
				"setTokenSaleWhitelistRegistry(address,bool)": {
					"details": "allows admin to specify the lookup to an outside TokenSaleRegistry.sol deployed contract where whitelisted addresses will be held.",
					"params": {
						"_tokenSaleWhitelistRegistry": "- the contract for the TokenSaleRegistry",
						"_whitelistEnabled": "- whether we want whitelisting validation to take place during the Buy operations."
					}
				},
				"setWallet(address)": {
					"details": "allows admin to specify a wallet where all ETH/DAI used to purchase our token will be sent.",
					"params": {
						"_wallet": "is the wallet address where calls to buyToken may be sent vs being stored in this contract until manual withdraw takes place by admin."
					}
				},
				"setWhitelistEnabled(bool)": {
					"details": "allows an admin to turn whitelist validation on/off",
					"params": {
						"_whitelistEnabled": "whether or not admin wants to turn whitelist lookup on/off"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpause()": {
					"details": "Called by a pauser to unpause, returns to normal state."
				},
				"withdrawAllEther()": {
					"details": "Whichever admin calls this function will receive all the ETH/DAI being held in this contract."
				},
				"withdrawAllTokens()": {
					"details": "Whichever admin calls this function will receive all custom tokens being held in this contract."
				},
				"withdrawEther(uint256)": {
					"details": "Whichever admin calls this function will receive the ETH/DAI",
					"params": {
						"amount": "Amount of the ETH/DAI requesting to be sent to admin."
					}
				},
				"withdrawTokens(uint256)": {
					"details": "Whichever admin calls this function will receive the custom tokens being held in this contract.",
					"params": {
						"amount": "Amount of the custom token requesting to be sent to admin."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"buyTokens()": {
					"notice": "to calculate amount of our token to give back in correspondence.     The ETH/DAI passed to this function is either kept within this contract until a manual Withdrawal is performed     by an admin, or if useWallet is set to true, then the ETH/DAI is auto-sent to an external wallet."
				},
				"withdrawAllEther()": {
					"notice": "Allow the owner of the contract to withdraw ETH/DAI"
				},
				"withdrawAllTokens()": {
					"notice": "Allow the owner of the contract to withdraw our custom token."
				},
				"withdrawEther(uint256)": {
					"notice": "Allow the owner of the contract to withdraw ETH/DAI"
				},
				"withdrawTokens(uint256)": {
					"notice": "Allow the owner of the contract to withdraw our custom token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/TokenSale.sol": "TokenSale"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol": {
			"keccak256": "0xc97186ac0ce22cdca8cc36e39956d42805d30d63a73dc29685982dfd6e094965",
			"license": "MIT",
			"urls": [
				"bzz-raw://289e8008b76436f25e09098c8236d06acb5f12d135fd9a5f62d1cb5940b2922e",
				"dweb:/ipfs/QmPKhKXuFAza31Z3zksEqSrgYUiLNi9b4UVL7c11ckUpTV"
			]
		},
		"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol": {
			"keccak256": "0xe1d32e268391be0363a839c4c620151ae4f141f406c6563edda6806567167c85",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6a26ed5b899109573fbdd09479cefd2fbddc672730cc9e5cd8436ab30a3c6e3",
				"dweb:/ipfs/QmZCwQxx1TGmwLXyJn9eegyFFbgZwUZN2gNGsJA3DXgUMA"
			]
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0xb555f6961347e79cc8948331a86290681438cdfd11db1727c9c6b25cfa070c25",
			"license": "MIT",
			"urls": [
				"bzz-raw://4448a557db91f77c895ab06a91c6ac01cdd6f7b49b1e0db7492c757e7b31c541",
				"dweb:/ipfs/QmQo2XmPBdpkiYjXM9NTRLHsiNREEHMcTgJuJ8gJr9WJvU"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc9424e6565a2f1b98cdd8b6e0d4b99988c3dee50a48cec894c10de205b2aa81d",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e78be3b581c80b806a45ae67db74dc136af27fac9153aa6b3838da4de3ec3ae",
				"dweb:/ipfs/QmTxdSJEk6gFA1jRLVP74x397bNhQ951c4g8VhyYUCpmUf"
			]
		},
		"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0x3c4b6e79af70daf861e5f24f6d563c0bdfbc0449d3d68caaa69f733ad651cfed",
			"license": "MIT",
			"urls": [
				"bzz-raw://e660ced52e7c259c0cc113f75c62cfc8277368fceb70fb15d3d7375033efb30f",
				"dweb:/ipfs/QmeGpyQiFdY8sDNsJ2JA1NWkoVLiLbNBgEt8oPn22gYXNf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xe5bd3cc9d310d651b3c599a5b5bc94bdebb079ee085c8ad3bba4bffa255338b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf7adbcb88df4ca17a262387468a436c21ac601e0be84a64c69aa5b87c061670",
				"dweb:/ipfs/QmQSrVN1DnpqD3TrdN4aDZ6nhqCXD3Vg6rNiG87tZng2Qy"
			]
		},
		"@openzeppelin/contracts/utils/EnumerableSet.sol": {
			"keccak256": "0x19c5d7d4c1141f0f6bf5b4d28e02c8329b78ad323c1931b3069d000ffb98c142",
			"license": "MIT",
			"urls": [
				"bzz-raw://66f68e50348220ddca37711681bdffc61ea30a4623fc76df8f7713e901a46098",
				"dweb:/ipfs/QmS8wzwEvby4mLSAcFeBLGXSUoEXy6UNZSXEqeXqCgNAE6"
			]
		},
		"@openzeppelin/upgrades/contracts/Initializable.sol": {
			"keccak256": "0x9c81c571e2957eb7d19da042b9aed1195457fb970304a770d62079afa1866836",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef3b6ab6bf20d3543d39b7745044c8811c697f627546bcd7c168f73e53fe4e3c",
				"dweb:/ipfs/Qmb3qediABgB5pA9dX4n9S7sNFg1uAaEP7RJWfDaPZCqv4"
			]
		},
		"contracts/TokenSale.sol": {
			"keccak256": "0x2f48ad0232040feb80ebe48c78bc23312406707ab90034277524b92d3f236cc6",
			"license": "Galt Project Society Construction and Terraforming Company",
			"urls": [
				"bzz-raw://8f5e4d843fcd5e4ca7ee6903069a6994208bbbc3d9ad8ced8ff84c326ae44c50",
				"dweb:/ipfs/QmUkRh6YH7BQwrDYo3Z4t3BohGu5QmTZpzMGsphmcp4N1d"
			]
		},
		"contracts/interfaces/ITokenSaleRegistry.sol": {
			"keccak256": "0x18f2de3a901ac04c860cef61e95b446f75abc85bae46f987a57f561dd872df8f",
			"license": "Galt Project Society Construction and Terraforming Company",
			"urls": [
				"bzz-raw://2f0067cbe21f4c2129fcdee1f1c8d1a0ee3a712d7fe2efe1368c565cab9381b4",
				"dweb:/ipfs/QmRzg2119PptBDTYcL78q5k9sbVUkA5it462L9Vbcv5tLN"
			]
		},
		"contracts/interfaces/IWhitelistedTokenSale.sol": {
			"keccak256": "0x288b17e9fc0655de13d05c3a93371028880467dde9f4865a77a0d50cdd65e87f",
			"license": "Galt Project Society Construction and Terraforming Company",
			"urls": [
				"bzz-raw://36bf1eb17c4801cf5ddca7a20312c3915e2e5b95088aaab6ae2bf95aab702a51",
				"dweb:/ipfs/QmfKak16x34aGUj7QinaZHsCVNSVahcWsHX8V8zLKakKbi"
			]
		},
		"contracts/traits/Administrated.sol": {
			"keccak256": "0x20feb7bea7174c29167ec9c8059e19941772d6f255d660359a8a762cc6a5e094",
			"license": "Galt Project Society Construction and Terraforming Company",
			"urls": [
				"bzz-raw://0dd2873b654ce4cf672bbabb7d7e656220f4d8203bc41fef79fe26644b952152",
				"dweb:/ipfs/QmZU8htV5RneRDrQFCtmvaXLzeL7mJciNYGXA5YnpK1CeU"
			]
		},
		"contracts/traits/Pausable.sol": {
			"keccak256": "0x67af6e7f45a10ac033f82fc870ae0bb47557816bac60fb8d8d0f14fd0a8b88c8",
			"license": "Galt Project Society Construction and Terraforming Company",
			"urls": [
				"bzz-raw://7e45f0d20ff0d7d5335fdd6e89044a6cae0bc31eb21c64e4d9b2a098452ba5db",
				"dweb:/ipfs/QmQC7PGPEbV1qvjF3mhLxBGreTnpwTYegxv4m2UfHBDbfp"
			]
		}
	},
	"version": 1
}